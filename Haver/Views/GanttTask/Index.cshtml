@model IEnumerable<haver.Models.GanttTask>

@{
    ViewData["Title"] = "Gantt Chart";
}

<h1>Gantt Chart</h1>

<div class="mb-3">
    <a asp-action="Create" class="btn btn-primary">Create New Task</a>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-3 col-lg-2 task-table-wrapper">
            <table class="table table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Task Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="d-flex justify-content-between align-items-center">
                                <span>@item.SalesOrder?.OrderNumber</span>
                                <div class="action-icons">
                                    <a asp-action="Edit" asp-route-id="@item.ID" class="icon-link">
                                        <i class="bi bi-pencil-fill"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.ID" class="icon-link">
                                        <i class="bi bi-trash-fill"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @* GANTT CHART DIV *@
        <div class="col-9 col-lg-10 gantt-chart-wrapper">
            <div id="gantt_chart" class="gantt-chart"></div>
        </div>
    </div>
</div>

@section stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.css">
    <style>
        .gantt-container {
            margin-left: -10px;
            margin-top: 0;
            padding: 10px 20px;
            padding-left: 30px;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

        .task-table-wrapper {
            position: sticky;
            left: 0;
            top: 0;
            padding: 9px 0px;
            background-color: #f8f9fa;
            z-index: 10;
            overflow-y: hidden;
        }

            .task-table-wrapper table {
                border-collapse: collapse;
                width: 100%;
            }

            .task-table-wrapper th,
            .task-table-wrapper td {
                padding: 9px;
                text-align: left;
                border: 1px solid #f5f5f5;
                border-top: none;
                font-size: 12px;
                white-space: nowrap;
            }


            .task-table-wrapper tbody tr:nth-child(odd) {
                background-color: #ffffff;
            }

            .task-table-wrapper tbody tr:nth-child(even) {
                background-color: #f5f5f5;
            }

            .task-table-wrapper th {
                background-color: white !important;
                height: 45px;
                padding: 19px;
                font-size: 14px;
                position: sticky;
                top: 0;
                background-color: #f8f9fa;
                z-index: 11;
            }

        .gantt-chart-wrapper {
            overflow-x: auto;
            overflow-y: hidden;
            white-space: nowrap;
            flex-grow: 1;
            height: auto;
        }

        .gantt-chart {
            min-width: 200px;
        }

        .table > :not(:last-child) > :last-child > * {
            border-bottom-color: #ddd;
        }

        .button-link {
            appearance: none;
            background-color: #fafbfc;
            border: 1px solid rgba(27, 31, 35, 0.15);
            border-radius: 6px;
            box-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;
            box-sizing: border-box;
            color: #24292e;
            cursor: pointer;
            display: inline-block;
            font-size: 14px;
            font-weight: 500;
            line-height: 20px;
            list-style: none;
            padding: 6px 16px;
            position: relative;
            transition: background-color 0.2s cubic-bezier(0.3, 0, 0.5, 1);
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
            vertical-align: middle;
            white-space: nowrap;
            word-wrap: break-word;
            text-decoration: none;
        }

            .button-link:hover {
                background-color: #f3f4f6;
                text-decoration: none;
                transition-duration: 0.1s;
            }

            .button-link:disabled {
                background-color: #fafbfc;
                border-color: rgba(27, 31, 35, 0.15);
                color: #959da5;
                cursor: default;
            }

            .button-link:active {
                background-color: #edeff2;
                box-shadow: rgba(225, 228, 232, 0.2) 0 1px 0 inset;
                transition: none 0s;
            }

            .button-link:focus {
                outline: 1px transparent;
            }

            .button-link:before {
                display: none;
            }

        .icon-link {
            appearance: none;
            background-color: #fafbfc;
            border-radius: 6px;
            box-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;
            box-sizing: border-box;
            color: #24292e;
            cursor: pointer;
            display: inline-block;
            font-size: 9px;
            font-weight: 500;
            line-height: 10px;
            list-style: none;
            position: relative;
            transition: background-color 0.2s cubic-bezier(0.3, 0, 0.5, 1);
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
            vertical-align: middle;
            white-space: nowrap;
            word-wrap: break-word;
            text-decoration: none;
            padding: 0 5px;
        }

        .bar-wrapper rect {
            stroke: white;
            stroke-width: 1px;
        }

    </style>
}


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetch("@Url.Action("GetGanttData", "GanttTask")")
                .then(response => response.json())
                .then(tasks => {
                    if (!tasks || tasks.length === 0) {
                        console.error("No tasks found.");
                        return;
                    }

                    tasks = tasks.map(task => ({
                        ...task,
                        progress: task.progress === 0 ? 0.1 : task.progress
                    }));

                    // Initialize the Gantt chart
                    let gantt = new Gantt("#gantt_chart", tasks, {
                        view_mode: 'Day',
                        on_click: task => console.log("Clicked:", task),
                        on_date_change: (task, start, end) => updateTask(task, start, end),
                        on_progress_change: (task, progress) => updateTask(task, null, null, progress),
                        custom_popup_html: task => `<b>${task.name}</b> - ${task.progress}%`
                    });

                    // Wait for Gantt chart to load, then modify progress bars
                    setTimeout(() => {
                        tasks.forEach(task => {
                            if (task.milestones.length > 0) {
                                drawMilestoneProgress(task);
                            }
                        });
                    }, 500);

                    // Function to add milestone colors inside task progress bars
                    function drawMilestoneProgress(task) {
                        let taskBar = document.querySelector(`.bar-wrapper[data-id="${task.id}"] .bar`);
                        if (!taskBar) return;

                        let taskWidth = taskBar.getBBox().width;
                        let taskStartX = taskBar.getBBox().x;
                        let taskHeight = taskBar.getBBox().height;
                        let milestoneContainer = taskBar.parentElement;

                        task.milestones.forEach((milestone, index) => {
                            let milestoneX = taskStartX + (milestone.progress / 100) * taskWidth;

                            //Set any custom colors
                            let milestoneColor = ["#FF5733", "#FFC300", "#DAF7A6"][index % 3];

                            let milestoneRect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                            milestoneRect.setAttribute("x", milestoneX);
                            milestoneRect.setAttribute("y", taskBar.getBBox().y);
                            milestoneRect.setAttribute("width", 5);
                            milestoneRect.setAttribute("height", taskHeight);
                            milestoneRect.setAttribute("fill", milestoneColor);
                            milestoneRect.setAttribute("rx", "2");
                            milestoneRect.setAttribute("ry", "2");

                            milestoneContainer.appendChild(milestoneRect);
                        });
                    }

                    function updateTask(task, start = null, end = null, progress = null) {
                        let updatedTask = {
                            ID: task.id,
                            Name: task.name,
                            StartDate: start ? start.toISOString().split('T')[0] : task.start,
                            EndDate: end ? end.toISOString().split('T')[0] : task.end,
                            Progress: progress !== null ? progress / 100 : task.progress / 100
                        };

                        fetch("@Url.Action("UpdateTask", "GanttTask")", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(updatedTask)
                        })
                            .then(response => response.json())
                            .then(data => console.log("Task Updated:", data))
                            .catch(error => console.error("Error updating task:", error));
                    }
                })
                .catch(error => console.error("Error fetching tasks:", error));
        });

    </script>
}