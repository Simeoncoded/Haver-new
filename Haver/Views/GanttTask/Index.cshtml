@model IEnumerable<haver.Models.GanttTask>

@{
    ViewData["Title"] = "Gantt Chart";
}

<h1>Gantt Chart</h1>

<div class="mb-3">
    <a asp-action="Create" class="btn btn-primary">Create New Task</a>
</div>

<div class="container-fluid">
    <div class="row">
        <!-- Sales Order List -->
        <div class="col-3 col-lg-2 task-table-wrapper">
            <table class="table table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Sales Order</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="d-flex justify-content-between align-items-center">
                                <span>@item.SalesOrder?.OrderNumber</span>
                                <div class="action-icons">
                                    <a asp-action="Edit" asp-route-id="@item.ID" class="icon-link">
                                        <i class="bi bi-pencil-fill"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.ID" class="icon-link text-danger">
                                        <i class="bi bi-trash-fill"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Gantt Chart -->
        <div class="col-9 col-lg-10 gantt-chart-wrapper">
            <div id="gantt_chart" class="gantt-chart"></div>
        </div>
    </div>
</div>

@section stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.6.1/frappe-gantt.css">
    <style>
        /* Ensure both columns align properly */
        .task-table-wrapper {
            padding: 0;
            margin: 0;
        }

        .task-table-wrapper table {
            width: 100%;
            border-collapse: collapse;
        }

        /* Ensure the Gantt chart is flush with the table */
        .gantt-chart-wrapper {
            padding-left: 0;
            margin-left: 0;
        }

        /* Style action icons */
        .icon-link {
            text-decoration: none;
            margin-left: 8px;
            font-size: 16px;
        }

        .icon-link i {
            color: #007bff;
        }

        .icon-link.text-danger i {
            color: #dc3545;
        }

        /* Improve table styling */
        .table th, .table td {
            text-align: left;
            vertical-align: middle;
        }

        /* Remove space between table and Gantt chart */
        .row {
            margin: 0;
            padding: 0;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.6.1/frappe-gantt.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Fetch task data from the server
            fetch("@Url.Action("GetGanttData", "GanttTask")")
                .then(response => response.json())
                .then(tasks => {
                    if (!tasks || tasks.length === 0) {
                        console.error("No tasks found.");
                        return;
                    }

                    // Normalize task progress
                    tasks = tasks.map(task => ({
                        ...task,
                        progress: task.progress === 0 ? 0.1 : task.progress
                    }));

                    // Initialize the Gantt chart
                    let gantt = new Gantt("#gantt_chart", tasks, {
                        view_mode: 'Day',
                        on_click: task => console.log("Clicked:", task),
                        on_date_change: (task, start, end) => updateTask(task, start, end),
                        on_progress_change: (task, progress) => updateTask(task, null, null, progress),
                        custom_popup_html: task => `<b>${task.name}</b> - ${task.progress}%`
                    });

                    // Update task details on the server
                    function updateTask(task, start = null, end = null, progress = null) {
                        let updatedTask = {
                            ID: task.id,
                            Name: task.name,
                            StartDate: start ? start.toISOString().split('T')[0] : task.start,
                            EndDate: end ? end.toISOString().split('T')[0] : task.end,
                            Progress: progress !== null ? progress / 100 : task.progress / 100
                        };

                        fetch("@Url.Action("UpdateTask", "GanttTask")", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(updatedTask)
                        })
                            .then(response => response.json())
                            .then(data => console.log("Task Updated:", data))
                            .catch(error => console.error("Error updating task:", error));
                    }
                })
                .catch(error => console.error("Error fetching tasks:", error));
        });
    </script>
}
