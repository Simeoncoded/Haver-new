@model List<haver.ViewModels.GanttViewModel>

@{
    ViewData["Title"] = "Gantt Chart";
}

<h2>Machinery Gantt Chart</h2>

<!-- Gantt Chart Container -->
<div id="gantt"></div>

@section stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.css">

}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var tasks = [
        @foreach (var task in Model)
        {
            <text>
                        {
                         id: "@task.UniqueID", // Use UniqueID instead of ID
                        name: "@task.MachineName",
                        start: "@(task.StartDate?.ToString("yyyy-MM-dd") ?? "")",
                        end: "@(task.EndDate?.ToString("yyyy-MM-dd") ?? "")",
                        progress: 0,
                        custom_class: "@task.MilestoneClass"
                        },
            </text>
        }
            ];

            var gantt = new Gantt("#gantt", tasks, {
                on_click: function (task) {
                    alert("Clicked on " + task.name);
                },
                on_date_change: function (task, start, end) {
                    console.log(task.name, start, end);
                },
                on_progress_change: function (task, progress) {
                    console.log(task.name, progress);
                },
                on_view_change: function (mode) {
                    console.log("View mode changed to " + mode);
                },
                view_mode: 'Week',
                language: 'en',
                custom_popup_html: function (task) {
                    return `<div class="gantt-task-popup">
                                <strong>${task.name}</strong><br>
                                <small>${task.start} → ${task.end}</small>
                            </div>`;
                }
            });

            // Apply colors AFTER rendering
            setTimeout(function () {
                tasks.forEach(task => {
                    let bars = document.querySelectorAll(`.bar-wrapper[data-id='${task.id}'] .bar`);
                    bars.forEach(bar => {
                        bar.style.fill = task.custom_class;
                    });
                });
            }, 500);
        });

    </script>
}




<style>
    .blue {
        fill: blue !important;
    }

    .yellow {
        fill: yellow !important;
    }

    .orange {
        fill: orange !important;
    }

    .purple {
        fill: purple !important;
    }

    .red {
        fill: red !important;
    }

    .brown {
        fill: brown !important;
    }

    .pink {
        fill: pink !important;
    }

    .cyan {
        fill: cyan !important;
    }

    .teal {
        fill: teal !important;
    }

    .lime {
        fill: lime !important;
    }

    .black {
        fill: black !important;
    }

    .gray {
        fill: gray !important;
    }
</style>