@model haver.ViewModels.GanttDetailsViewModel

@{
    ViewData["Title"] = "Gantt Data Details";
}



<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            @if (!Model.GanttData.IsFinalized)
            {
                <a asp-action="Edit" asp-route-id="@Model.GanttData.ID" class="btn">Edit</a>
                <form asp-action="FinalizeGantt" method="post" style="display:inline;">
                    <input type="hidden" name="id" value="@Model.GanttData.ID" />
                    <button type="submit" class="btn" onclick="return confirm('Are you sure you want to finalize this Gantt chart?');">
                        Finalize
                    </button>
                </form>
            }
            else
            {
                <span class="badge bg-success">Finalized</span>
                <form asp-action="UnfinalizeGantt" method="post" style="display:inline;">
                    <input type="hidden" name="id" value="@Model.GanttData.ID" />
                    <button type="submit" class="btn" onclick="return confirm('Are you sure you want to unfinalize this Gantt chart?');">
                        Unfinalize
                    </button>
                </form>
            }


            <button href="#" onclick="printPrintableArea()" return false;" class="ms-3 btn btn-sm "> <i class="fa-solid fa-print"></i> Print</button>
            <a asp-action="Index" class="btn">Back to List</a>
        </div>


    </div>

    <div id="printableArea">
    <div class="info-container opts">
        <div class="info-box p-3 bg-light border rounded mb-3">
            <dl class="row">
                <!-- Machine Information -->
                <dt class="col-md-2">Machine & Serial Number</dt>
                <dd class="col-md-2">
                        <a href="@Url.Action("Index", "MachineProcurement", new { MachineID = Model.GanttData.Machine.ID })"
                           data-bs-toggle="tooltip" title="View Machine Details" target="_blank">
                            @Model.GanttData.Machine.Description
                        </a>


                    </dd>

                <dt class="col-md-2">Order Number</dt>
                <dd class="col-md-2">
                        <a href="@Url.Action("Details", "SalesOrder", new { id = Model.GanttData.Machine.SalesOrder.ID })"
                           data-bs-toggle="tooltip" title="View Sales Order Details" target="_blank">
                            @Model.GanttData.Machine.SalesOrder.OrderNumber
                        </a>
                    </dd>

                <dt class="col-md-2">Customer</dt>
                <dd class="col-md-2">@Model.GanttData.Machine.SalesOrder.CompanyName</dd>

                <dt class="col-md-2">Approval Drawings Received</dt>
                <dd class="col-md-2">@Model.GanttData.AppDRcd?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Approval Drawings Expected</dt>
                <dd class="col-md-2">@Model.GanttData.AppDExp?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Engineering Expected</dt>
                <dd class="col-md-2">@Model.GanttData.EngExpected?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Engineering Released</dt>
                <dd class="col-md-2">@Model.GanttData.EngReleased?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Customer Approval</dt>
                <dd class="col-md-2">@Model.GanttData.CustomerApproval?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Package Released</dt>
                <dd class="col-md-2">@Model.GanttData.PackageReleased?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Purchase Orders Expected</dt>
                <dd class="col-md-2">@Model.GanttData.PurchaseOrdersIssued?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Purchase Orders Due</dt>
                <dd class="col-md-2">@Model.GanttData.PurchaseOrdersCompleted?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Purchase Orders Received</dt>
                <dd class="col-md-2">@Model.GanttData.PurchaseOrdersReceived?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Supplier PO Due</dt>
                    <dd class="col-md-2">@Model.GanttData.SupplierPODue?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Assembly Start</dt>
                    <dd class="col-md-2">@Model.GanttData.AssemblyStart?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Assembly Complete</dt>
                    <dd class="col-md-2">@Model.GanttData.AssemblyComplete?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Shipping Expected</dt>
                    <dd class="col-md-2">@Model.GanttData.ShipExpected?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Actual Shipping</dt>
                    <dd class="col-md-2">@Model.GanttData.ShipActual?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Delivery Expected</dt>
                    <dd class="col-md-2">@Model.GanttData.DeliveryExpected?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-2">Actual Delivery</dt>
                    <dd class="col-md-2">@Model.GanttData.DeliveryActual?.ToString("MMM dd, yyyy")</dd>
            </dl>

            <p class="fw-bold text-center" style="font-size:20px;">Notes</p>

            <div class="row">
                <div class="col-12">
                    <dl>
                    <dd class="mb-4">
                        @if (!string.IsNullOrEmpty(Model.GanttData.Notes))
                        {
                            @Html.Raw(Model.GanttData.Notes)
                        }
                        else
                        {
                            <span class="text-muted">No notes available</span>
                        }
                    </dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <!-- Gantt Chart Card -->
    <div class="info-container mt-4">
        <div class="info-box p-3 bg-light border rounded">
            <div class="card-header bg-success text-white mb-3">
                <h5 class="mb-0">Gantt Chart</h5>
            </div>
            <div id="gantt" style="min-width: 1000px; overflow-x: auto;"></div>
        </div>
    </div>
</div>

</div>
<br />
@section stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.css">
    <style>

         @@media print {
        body * {
            visibility: hidden;
        }
       
        #printableArea, #printableArea * {
            visibility: visible;
        }

        #printableArea {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }

            

        .info-box dt {
            width: 30%;
            float: left;
            clear: both;
            margin-bottom: 0.5rem;
        }

        .info-box dd {
            width: 70%;
            float: left;
            margin-bottom: 0.5rem;
        }


        .procurement-table {
            width: 100% !important;
            font-size: 12px;
        }

        .section-header {
            font-size: 18px !important;
            margin: 15px 0;
        }

        .badge, .btn {
            display: none !important;
        }

        .bg-light, .bg-dark {
            background-color: #fff !important;
        }

        table {
            page-break-inside: auto !important;
        }

        tr {
            page-break-inside: avoid !important;
        }

     
    }

    td {
        cursor: default;
    }

        .card-header h5 {
            font-weight: 500;
        }

        .notes-content {
            white-space: pre-wrap;
            line-height: 1.6;
        }

        #gantt {
            min-width: 1000px;
        }

        dt {
            font-weight: 500;
            color: #666;
        }

        dd {
            margin-bottom: 0.5rem;
        }

        .bar-label {
            display: none !important;
        }

        .gantt .row {
            height: 20px !important; /* Adjust the height as needed */
        }
        /* Adjust SVG height */
        .gantt-container svg {
            height: 100px !important; /* Shrink empty space */
        }

        .handle {
            display: none !important;
        }
        /* Disable interaction with drag handles */
        .handle {
            pointer-events: none !important;
            display: none !important;
        }

        /* Allow clicks on bars and labels */
        .bar,
        .bar-label {
            pointer-events: auto !important;
            cursor: pointer !important;
        }


    </style>
}


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.6.0/frappe-gantt.min.js"></script>
    <script>
    function printPrintableArea() {
        window.print();
    }
</script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var tasks = [
        @foreach (var task in Model.GanttTasks)
        {
            <text>
                        {
                            id: "@task.UniqueID",
                        name: "@task.MachineName",
                        start: "@(task.StartDate?.ToString("yyyy-MM-dd") ?? "")",
                        end: "@(task.EndDate?.ToString("yyyy-MM-dd") ?? "")",
                        progress: 0,
                        custom_class: "@task.MilestoneClass",
                        _row: 0  // Force all tasks into a single row
                                    },
            </text>
        }
                    ];

            var gantt = new Gantt("#gantt", tasks, {
                draggable:false, 
                can_move:false,
                can_resize: false,
                on_click: function (task) {
                    alert("Clicked on " + task.name);
                },
                on_date_change: function (task, start, end) {
                    console.log(task.name, start, end);
                },
                on_progress_change: function (task, progress) {
                    console.log(task.name, progress);
                },
                on_view_change: function (mode) {
                    console.log("View mode changed to " + mode);
                },
                view_mode: 'Week',
                language: 'en',
                custom_popup_html: function (task) {
                    return `<div class="gantt-task-popup">
                                        <strong>${task.name}</strong><br>
                                        <small>${task.start} → ${task.end}</small>
                                    </div>`;
                }
            });


            // Manually adjust all task bars to align in the same row
            setTimeout(function () {
                const yOffset = 23; // Adjust to align all bars properly

                function applyYOffset(el, yOffset) {
                    const tag = el.tagName.toLowerCase();
                    if (tag === "rect" || tag === "polygon") {
                        if (tag === "rect") {
                            el.setAttribute("y", yOffset);
                        } else if (tag === "polygon") {
                            let points = el.getAttribute("points");
                            if (points) {
                                let updatedPoints = points
                                    .split(" ")
                                    .map(point => {
                                        let [x, y] = point.split(",").map(Number);
                                        return `${x},${y + yOffset}`;
                                    })
                                    .join(" ");
                                el.setAttribute("points", updatedPoints);
                            }
                        }
                    } else if (tag === "g") {
                        el.setAttribute("transform", `translate(0, ${yOffset})`);
                    } else {
                        el.style.transform = `translateY(${yOffset}px)`;
                    }
                }

                // Move all bars
                document.querySelectorAll(".bar").forEach(bar => {
                    applyYOffset(bar, yOffset);
                });

                // Move progress bars
                document.querySelectorAll(".bar-progress").forEach(progress => {
                    applyYOffset(progress, yOffset);
                });

                // Move bar labels
                document.querySelectorAll(".bar-label").forEach(label => {
                    applyYOffset(label, yOffset);
                });

                // Move parent summary bars (grey bars)
                document.querySelectorAll(".bar:not(.bar-progress)").forEach(parentBar => {
                    applyYOffset(parentBar, yOffset);
                });

                // Move bar wrappers
                document.querySelectorAll(".bar-wrapper").forEach(wrapper => {
                    applyYOffset(wrapper, yOffset);
                });

                // Move drag handles (start and end of tasks)
                document.querySelectorAll(".handle").forEach(handle => {
                    applyYOffset(handle, yOffset);
                });

                // Move all task groups (which contain bars, progress, and handles)
                document.querySelectorAll("g.task").forEach(taskGroup => {
                    applyYOffset(taskGroup, yOffset);
                });

                // Adjust grid row heights
                document.querySelectorAll(".gantt .row").forEach(row => {
                    row.style.height = "40px";
                    row.style.display = "flex";
                    row.style.alignItems = "center";
                    row.style.borderBottom = "none";
                });

                // Adjust grid background heights
                document.querySelectorAll(".grid-row, .grid-background").forEach(grid => {
                    grid.style.height = "40px";
                });

                // Apply custom colors
                // Apply milestone-specific colors
                tasks.forEach((task) => {
                    let bars = document.querySelectorAll(`.bar-wrapper[data-id='${task.id}'] .bar`);
                    bars.forEach(bar => {
                        bar.style.fill = task.custom_class; // Use the color from the ViewModel
                    });
                });


                // Scroll to today's date
                showCurrentDay();

            }, 500);

            function showCurrentDay() {
                const currentDay = document.querySelector('.today-highlight');
                if (currentDay) {
                    currentDay.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
                }
            }
        });

        gantt.options.bar_height = 20; // Reduce bar height to match row height
        gantt.refresh(); // Apply changes

    </script>
}

