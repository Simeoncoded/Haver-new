@model haver.ViewModels.GanttDetailsViewModel

@{
    ViewData["Title"] = "Details";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <a asp-action="Edit" asp-route-id="@Model.GanttData.ID" class="btn">Edit</a>
            <a asp-action="Index" class="btn ">Back to List</a>
        </div>
    </div>

    <div class="info-container">
        <div class="info-box p-3 bg-light border rounded mb-3">
            <dl class="row">
                <!-- Machine Information -->
                <dt class="col-md-3">Machine & Serial Number</dt>
                <dd class="col-md-3">@Model.GanttData.Machine.Description</dd>

                <dt class="col-md-3">Order Number</dt>
                <dd class="col-md-3">@Model.GanttData.Machine.SalesOrder.OrderNumber</dd>

                <dt class="col-md-3">Customer</dt>
                <dd class="col-md-3">@Model.GanttData.Machine.SalesOrder.CompanyName</dd>

                <dt class="col-md-3">Approval Drawings Received</dt>
                <dd class="col-md-3">@Model.GanttData.AppDRcd?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-3">Engineering Expected</dt>
                <dd class="col-md-3">@Model.GanttData.EngExpected?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-3">Engineering Released</dt>
                <dd class="col-md-3">@Model.GanttData.EngReleased?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-3">Customer Approval</dt>
                <dd class="col-md-3">@Model.GanttData.CustomerApproval?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-3">Package Released</dt>
                <dd class="col-md-3">@Model.GanttData.PackageReleased?.ToString("MMM dd, yyyy")</dd>

                <dt class="col-md-3">Supplier PO Due</dt>
                <dd class="col-md-3">@Model.GanttData.SupplierPODue?.ToString("d")</dd>

                <dt class="col-md-3">Assembly Start</dt>
                <dd class="col-md-3">@Model.GanttData.AssemblyStart?.ToString("d")</dd>

                <dt class="col-md-3">Assembly Complete</dt>
                <dd class="col-md-3">@Model.GanttData.AssemblyComplete?.ToString("d")</dd>

                <dt class="col-md-3">Shipping Expected</dt>
                <dd class="col-md-3">@Model.GanttData.ShipExpected?.ToString("d")</dd>

                <dt class="col-md-3">Actual Shipping</dt>
                <dd class="col-md-3">@Model.GanttData.ShipActual?.ToString("d")</dd>

                <dt class="col-md-3">Delivery Expected</dt>
                <dd class="col-md-3">@Model.GanttData.DeliveryExpected?.ToString("d")</dd>

                <dt class="col-md-3">Actual Delivery</dt>
                <dd class="col-md-3">@Model.GanttData.DeliveryActual?.ToString("d")</dd>
            </dl>

            <p class="fw-bold text-center" style="font-size:20px;">Notes</p>

            <div class="row">
                <div class="col-12">
                    <dl>
                    <dd class="mb-4">
                        @if (!string.IsNullOrEmpty(Model.GanttData.Notes))
                        {
                            @Html.Raw(Model.GanttData.Notes)
                        }
                        else
                        {
                            <span class="text-muted">No notes available</span>
                        }
                    </dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <!-- Gantt Chart Card -->
    <div class="info-container mt-4">
        <div class="info-box p-3 bg-light border rounded">
            <div class="card-header bg-success text-white mb-3">
                <h5 class="mb-0">Gantt Chart</h5>
            </div>
            <div id="gantt" style="min-width: 1000px; overflow-x: auto;"></div>
        </div>
    </div>
</div>


@section stylesheets {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.css">
    <style>
        .card-header h5 {
            font-weight: 500;
        }

        .notes-content {
            white-space: pre-wrap;
            line-height: 1.6;
        }

        #gantt {
            min-width: 1000px;
        }

        dt {
            font-weight: 500;
            color: #666;
        }

        dd {
            margin-bottom: 0.5rem;
        }
    </style>
}


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/frappe-gantt/0.5.0/frappe-gantt.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var tasks = [
        @foreach (var task in Model.GanttTasks)
        {
            <text>
                        {
                            id: "@task.UniqueID", // Use UniqueID instead of ID
                        name: "@task.MachineName",
                        start: "@(task.StartDate?.ToString("yyyy-MM-dd") ?? "")",
                        end: "@(task.EndDate?.ToString("yyyy-MM-dd") ?? "")",
                        progress: 0,
                        custom_class: "@task.MilestoneClass"
                                    },
            </text>
        }
                    ];

            var gantt = new Gantt("#gantt", tasks, {
                on_click: function (task) {
                    alert("Clicked on " + task.name);
                },
                on_date_change: function (task, start, end) {
                    console.log(task.name, start, end);
                },
                on_progress_change: function (task, progress) {
                    console.log(task.name, progress);
                },
                on_view_change: function (mode) {
                    console.log("View mode changed to " + mode);
                },
                view_mode: 'Week',
                language: 'en',
                custom_popup_html: function (task) {
                    return `<div class="gantt-task-popup">
                                        <strong>${task.name}</strong><br>
                                        <small>${task.start} → ${task.end}</small>
                                    </div>`;
                }
            });

            // Apply colors AFTER rendering
            setTimeout(function () {
                tasks.forEach(task => {
                    let bars = document.querySelectorAll(`.bar-wrapper[data-id='${task.id}'] .bar`);
                    bars.forEach(bar => {
                        bar.style.fill = task.custom_class;
                    });
                });
            }, 500);
        });

    </script>
}
